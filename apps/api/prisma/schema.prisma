datasource db {
  url                  = env("DATABASE_URL")
  provider             = "mysql"
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

model Game {
  id          String      @id @default(cuid())
  name        String      @unique
  displayName String
  imageUrl    String      @db.Text
  start       DateTime
  end         DateTime
  confirmed   Boolean     @default(false)
  path        String
  prices      GamePrice[]
  Sending     Sending?    @relation(fields: [sendingId], references: [id])
  sendingId   String?
}

model GamePrice {
  id             String @id @default(cuid())
  value          Float
  formattedValue String
  gameId         String
  game           Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  currencyCode   String
}

model Server {
  id           BigInt       @id @unique
  roleId       String?
  channelId    String?
  threadId     String?
  webhookId    String?
  webhookToken String?
  languageCode String       @default("en")
  currencyCode String       @default("USD")
  createdAt    DateTime     @default(now())
  commandLogs  CommandLog[]
  sendingLogs  SendingLog[]
}

model CommandLog {
  id       String  @id @default(cuid())
  command  String
  senderId String
  serverId BigInt?
  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  error    String?
}

model SendingLog {
  id        String         @id @default(cuid())
  type      SendingLogType
  result    String         @db.Text
  success   Boolean
  serverId  BigInt
  server    Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  sending   Sending        @relation(fields: [sendingId], references: [id], onDelete: Cascade)
  sendingId String
}

model Sending {
  id     String       @id @default(cuid())
  target Int          @default(0)
  games  Game[]
  logs   SendingLog[]
}

model User {
  id           String  @id @default(cuid())
  identifier   String  @unique
  bot          Boolean
  flags        Int
  name         String?
  tokenVersion String
}

enum SendingLogType {
  MESSAGE
  WEBHOOK
}
