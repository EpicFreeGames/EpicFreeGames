//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "game")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub id: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub display_name: String,
    #[sea_orm(column_type = "Text")]
    pub image_url: String,
    pub start_date: DateTime,
    pub end_date: DateTime,
    pub confirmed: bool,
    #[sea_orm(column_type = "Text")]
    pub path: String,
    #[sea_orm(column_type = "Text")]
    pub store_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub sending_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_price::Entity")]
    GamePrice,
    #[sea_orm(
        belongs_to = "super::sending::Entity",
        from = "Column::SendingId",
        to = "super::sending::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Sending,
}

impl Related<super::game_price::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamePrice.def()
    }
}

impl Related<super::sending::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sending.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
