datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}

model game {
    id           String       @id
    name         String       @unique @db.Text
    display_name String       @db.Text
    image_url    String       @db.Text
    start_date   DateTime     @db.Timestamp
    end_date     DateTime     @db.Timestamp
    confirmed    Boolean      @default(false)
    path         String
    store_id     String
    prices       game_price[]
    sending      sending?     @relation(fields: [sending_id], references: [id], onDelete: Cascade)
    sending_id   String?
}

model game_price {
    id              String @id
    value           Float
    formatted_value String
    game_id         String
    game            game   @relation(fields: [game_id], references: [id], onDelete: Cascade)
    currency_code   String
}

model server {
    id            BigInt        @id @unique
    role_id       BigInt?
    channel_id    BigInt?
    thread_id     BigInt?
    webhook_id    BigInt?
    webhook_token String?
    language_code String        @default("en")
    currency_code String        @default("USD")
    created_at    DateTime      @default(now())
    command_logs  command_log[]
    sending_logs  sending_log[]
}

model command_log {
    id         String   @id
    command    String
    sender_id  BigInt
    server_id  BigInt?
    server     server?  @relation(fields: [server_id], references: [id], onDelete: Cascade)
    error      String?  @db.Text
    created_at DateTime @default(now())
}

model sending_log {
    id         String  @id
    type       String
    result     String  @db.Text
    success    Boolean
    server_id  BigInt
    server     server  @relation(fields: [server_id], references: [id], onDelete: Cascade)
    sending    sending @relation(fields: [sending_id], references: [id], onDelete: Cascade)
    sending_id String
}

model sending {
    id    String        @id
    games game[]
    logs  sending_log[]
}

model api_user {
    id         String    @id
    identifier String    @unique
    flags      BigInt
    username   String?
    sessions   session[]
}

model session {
    id         String   @id
    created_at DateTime @default(now())
    expires_at DateTime
    ip         String
    user_agent String
    user_id    String
    user       api_user @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
