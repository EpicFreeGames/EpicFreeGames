datasource db {
  url                  = env("DATABASE_URL")
  provider             = "mysql"
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Game {
  id          String      @id @default(cuid())
  name        String      @unique
  displayName String
  imageUrl    String      @db.Text
  start       DateTime
  end         DateTime
  confirmed   Boolean     @default(false)
  path        String
  prices      GamePrice[]
  Sending     Sending?    @relation(fields: [sendingId], references: [id])
  sendingId   String?
}

model GamePrice {
  id             String   @id @default(cuid())
  value          Float
  formattedValue String
  gameId         String
  game           Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  currencyCode   String
  currency       Currency @relation(fields: [currencyCode], references: [code], onDelete: Cascade)
}

model Server {
  id           BigInt       @id @unique
  roleId       String?
  channelId    String?
  threadId     String?
  webhookId    String?
  webhookToken String?
  languageCode String?
  currencyId   String
  currency     Currency     @relation(fields: [currencyId], references: [id])
  createdAt    DateTime     @default(now())
  commandLogs  CommandLog[]
  sendingLogs  SendingLog[]
}

model Currency {
  id             String      @id @default(cuid())
  code           String      @unique
  name           String
  apiValue       String
  inFrontOfPrice String      @default("")
  afterPrice     String      @default("")
  servers        Server[]
  prices         GamePrice[]
}

model CommandLog {
  id       String  @id @default(cuid())
  command  String
  senderId String
  serverId BigInt?
  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  error    String?
}

model SendingLog {
  id        String         @id @default(cuid())
  type      SendingLogType
  result    String
  success   Boolean
  serverId  BigInt
  server    Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  sending   Sending        @relation(fields: [sendingId], references: [id])
  sendingId String
}

model Sending {
  id        String        @id @default(cuid())
  successes Int           @default(0)
  failures  Int           @default(0)
  target    Int           @default(0)
  status    SendingStatus
  games     Game[]
  logs      SendingLog[]
}

model User {
  id        String @id @default(cuid())
  discordId String @unique
  flags     Int    @default(0)
}

enum SendingLogType {
  MESSAGE
  WEBHOOK
}

enum SendingStatus {
  IDLE
  SENDING
  SENT
}
