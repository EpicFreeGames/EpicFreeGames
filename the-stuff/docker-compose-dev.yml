version: "3.9"

services:
  redis:
    image: redis/redis-stack
    volumes:
      - redis:/data
    restart: unless-stopped
    ports:
      - "3002:8001"

  api:
    depends_on:
      - redis
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped
    volumes:
      - ./api/src:/app/src:r
    ports:
      - "3010:3000"
    command: yarn dev

  dash:
    depends_on:
      - api
      - redis
    build:
      context: ./next-dash
      dockerfile: Dockerfile.dev
    image: dash/next-dash
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped
    volumes:
      - ./next-dash/src:/app/src:r
    ports:
      - "3001:3000"

  front:
    build:
      context: ./front
      dockerfile: Dockerfile.dev
    image: front/front
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped
    volumes:
      - ./front/src:/app/src:r
    ports:
      - "3000:3000"

  bot_rest-proxy:
    depends_on:
      - api
      - redis
    build:
      context: ./bot
      args:
        - SCOPE=rest-proxy
    image: bot_rest-proxy
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped

  bot_gateway:
    depends_on:
      - api
      - redis
      - bot_rest-proxy
    build:
      context: ./bot
      args:
        - SCOPE=gateway
    image: bot_gateway
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped

  bot_sender:
    depends_on:
      - api
      - redis
      - front
      - bot_gateway
      - bot_rest-proxy
    build:
      context: ./bot
      args:
        - SCOPE=sender
    image: bot_sender
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped
    command: "deno run --watch -A ./src/sender/mod.ts"

  bot_event-handler:
    depends_on:
      - api
      - redis
      - front
      - bot_sender
      - bot_gateway
      - bot_rest-proxy
    build:
      context: ./bot
      args:
        - SCOPE=event-handler
    image: bot_event-handler
    env_file:
      - .env-dev
    environment:
      PORT: "3000"
    restart: unless-stopped
    volumes:
      - ./bot/src:/app/src:r
    command: "deno run --watch -A ./src/event-handler/mod.ts"

volumes:
  redis:
