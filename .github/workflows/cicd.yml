name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  api-ci:
    name: "Api: Typecheck"
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node with Yarn cache
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
          cache-dependency-path: ./the-stuff/api/yarn.lock

      - name: Install deps
        run: cd ./the-stuff/api && yarn --frozen-lockfile

      - name: Type check
        run: cd ./the-stuff/api && yarn prisma generate && yarn typecheck

  api-docker-build-push:
    name: "Api: Build and push Docker image"
    needs: api-ci
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_USER }}/efg-api
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./the-stuff/api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  bot-ci:
    name: "Bot: Typecheck"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part:
          - sender
          - gateway
          - rest-proxy
          - event-handler
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Type check
        run: cd ./the-stuff/bot && deno task typecheck-${{ matrix.part }}

  bot-docker-build-push:
    name: "Bot: Build and push Docker images"
    needs: bot-ci
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part:
          - sender
          - gateway
          - rest-proxy
          - event-handler
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_USER }}/efg-bot_${{ matrix.part }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./the-stuff/bot
          platforms: linux/amd64
          push: true
          build-args: SCOPE=${{ matrix.part }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  api-dash-bot-deploy-staging:
    name: "Api, Dash, Bot: Deploy to Staging"
    environment: Staging
    runs-on: ubuntu-latest
    needs:
      - api-docker-build-push
      - bot-docker-build-push
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create folder
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          script: mkdir -p ~/efg-staging

      - name: Update Docker compose file
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          source: the-stuff/docker-compose-staging.yml
          target: /home/${{ secrets.SXX_USERNAME }}/efg-staging
          strip_components: 1

      - name: Recreate containers
        uses: appleboy/ssh-action@v0.1.5
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          SENDER_AUTH: ${{ secrets.SENDER_AUTH }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REST_PROXY_AUTH: ${{ secrets.REST_PROXY_AUTH }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID }}
          EFG_API_BOT_SECRET: ${{ secrets.EFG_API_BOT_SECRET }}
          EVENT_HANDLER_AUTH: ${{ secrets.EVENT_HANDLER_AUTH }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          envs: REGISTRY,REGISTRY_USER,BOT_TOKEN,SENDER_AUTH,DATABASE_URL,REST_PROXY_AUTH,DISCORD_CLIENT_ID,EFG_API_BOT_SECRET,EVENT_HANDLER_AUTH,DISCORD_CLIENT_SECRET
          script: |
            cd ~/efg-staging \
            && REGISRTY=$REGISTRY REGISTRY_USER=$REGISTRY_USER docker compose -f docker-compose-staging.yml pull \
            && docker compose -f docker-compose-staging.yml -p efg-staging up -d --force-recreate api bot_sender bot_gateway bot_rest-proxy bot_event-handler
