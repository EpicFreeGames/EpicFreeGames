name: CI/CD

on:
  push:
    branches:
      - cicd
  workflow_dispatch:

jobs:
  build-code:
    name: "Build code"
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node with Yarn cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./yarn.lock

      - name: Install deps
        run: yarn --frozen-lockfile

      - name: Build code
        run: yarn build

  services-docker-build-push:
    name: "Services build and push Docker images"
    needs: [build-code]
    runs-on: ubuntu-latest
    strategy: 
      matrix: 
        service: 
          - api
          - discord-rest-proxy
          - interactions-endpoint
          - sender
          - under-maintenance
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_USER }}/efg-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,format=long

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            APP=@efg/${{ matrix.service }}
            APP_FOLDER=${{ matrix.service }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    
  services-deploy-staging:
    name: "Update staging deployment"
    environment: Staging
    runs-on: ubuntu-latest
    needs: [services-docker-build-push]
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create folder
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          script: mkdir -p ~/efg-staging

      - name: Update Docker compose file
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          source: ./docker-compose-staging.yml
          target: /home/${{ secrets.SXX_USERNAME }}/efg-staging
          strip_components: 1

      - name: Recreate containers
        uses: appleboy/ssh-action@v0.1.5
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
          SECRET: ${{ secrets.SECRET }}
          VALID_BOT_TOKEN: ${{ secrets.VALID_BOT_TOKEN }}
          VALID_FRONT_TOKEN: ${{ secrets.VALID_FRONT_TOKEN }}
          VALID_SCRAPER_TOKEN: ${{ secrets.VALID_SCRAPER_TOKEN }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          VERSION: sha-${{ github.sha }}
        with:
          host: ${{ secrets.SXX_HOST }}
          username: ${{ secrets.SXX_USERNAME }}
          port: ${{ secrets.SXX_PORT }}
          key: ${{ secrets.SXX_KEY }}
          script: |
            cd ~/efg-staging \
            && REGISTRY=${{ env.REGISTRY }} \
              REGISTRY_USER=${{ env.REGISTRY_USER }} \
              DISCORD_BOT_TOKEN=${{ env.DISCORD_BOT_TOKEN }} \
              DISCORD_CLIENT_SECRET=${{ env.DISCORD_CLIENT_SECRET }} \
              SECRET=${{ env.SECRET }} \
              VALID_BOT_TOKEN=${{ env.VALID_BOT_TOKEN }} \
              VALID_FRONT_TOKEN=${{ env.VALID_FRONT_TOKEN }} \
              VALID_SCRAPER_TOKEN=${{ env.VALID_SCRAPER_TOKEN }} \
              DATABASE_URL=${{ env.DATABASE_URL }} \
              VERSION=${{ env.VERSION }} \
                docker compose -f docker-compose-staging.yml -p efg-staging up -d --force-recreate

  # dash-deploy-staging:
  #   name: "Dash: Deploy to Staging"
  #   environment: Staging
  #   runs-on: ubuntu-latest
  #   needs: [api-bot-deploy-staging]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Pull Vercel Environment Information
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASH }}
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project to Vercel
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASH }}
  #       run: |
  #         vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} \
  #         -e NEXT_PUBLIC_EFG_API_BASEURL=${{ secrets.NEXT_PUBLIC_EFG_API_BASEURL }} \
  #         -e NEXT_PUBLIC_EFG_API_WS_URL=${{ secrets.NEXT_PUBLIC_EFG_API_BASEURL }} \
  #         -b NEXT_PUBLIC_EFG_API_BASEURL=${{ secrets.NEXT_PUBLIC_EFG_API_BASEURL }} \
  #         -b NEXT_PUBLIC_EFG_API_WS_URL=${{ secrets.NEXT_PUBLIC_EFG_API_BASEURL }}

  # front-deploy-staging:
  #   name: "Front: Deploy to Staging"
  #   environment: Staging
  #   runs-on: ubuntu-latest
  #   needs: [api-bot-deploy-staging]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest

  #     - name: Pull Vercel Environment Information
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONT }}
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

  #     - name: Deploy Project to Vercel
  #       env:
  #         VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONT }}
  #       run: | 
  #         vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} \
  #           -b EFG_API_BASEURL=${{ secrets.EFG_API_BASEURL }} \
  #           -b EFG_API_FRONT_TOKEN=${{ secrets.VALID_FRONT_TOKEN }} \
  #           -b ENVIRONMENT=Staging