name: CI/CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  api-ci:
    name: "Api: Typecheck"
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node with Yarn cache
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./the-stuff/api/yarn.lock

      - name: Install deps
        run: cd ./the-stuff/api && yarn --frozen-lockfile

      - name: Type check
        run: cd ./the-stuff/api && yarn prisma generate && yarn typecheck

  api-docker-build-push:
    name: "Api: Build and push Docker image"
    needs: api-ci
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflows
        uses: styfle/cancel-workflow-action@0.10.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to the container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASS }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.REGISTRY }}/${{ secrets.REGISTRY_USER }}/efg-api
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./the-stuff/api
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  dash-deploy-staging:
    name: "Dash: Deploy to Staging"
    environment: Staging
    runs-on: ubuntu-latest
    needs: [api-bot-deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASH }}
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project to Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_DASH }}
        run: |
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} \
          -e NEXT_PUBLIC_EFG_API_BASEURL=${{ secrets.EFG_API_BASEURL }} \
          -e NEXT_PUBLIC_EFG_API_WS_URL=${{ secrets.EFG_API_WS_URL }} \
          -b NEXT_PUBLIC_EFG_API_BASEURL=${{ secrets.EFG_API_BASEURL }} \
          -b NEXT_PUBLIC_EFG_API_WS_URL=${{ secrets.EFG_API_WS_URL }}

  front-deploy-staging:
    name: "Front: Deploy to Staging"
    environment: Staging
    runs-on: ubuntu-latest
    needs: [api-bot-deploy-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONT }}
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project to Vercel
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONT }}
        run: | 
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} \
            -b EFG_API_BASEURL=${{ secrets.EFG_API_BASEURL }} \
            -b EFG_API_FRONT_TOKEN=${{ secrets.VALID_FRONT_TOKEN }} \
            -b ENVIRONMENT=Staging